using nilnul.fs._address;
using nilnul.fs._address._route.division_._div._dir;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace nilnul.fs.folder.dirs_
{
	/// <summary>
	/// excluding:
	///		unlisted in cfg
	///		name started with dot
	///			name with some notation? --this is reserved for furture implementation
	///		autogenerated folders by such as Visual Studio
	///			that will not be baked
	/// </summary>
	static public class _ArtisanX
	{



		static public IEnumerable<DirI> Dirs(nilnul.fs.FolderI parent)
		{

			var unlisted = nilnul.fs.folder.dnts_._neglect._cfg_.doc_._DefaultX.Captions(parent);

			return nilnul.fs.folder.dirs_.notDotLed_.deV_._ExcludeAutogenX.Dirs(parent).Where(

				d=>
				!unlisted.Contains(
					d.denote.en
					,
					nilnul.txt.eq_.CaseInsensitive.Singleton
				)
			);


		}

		static public IEnumerable<DirI> Dirs(nilnul.fs.Folder parent)
		{
			return Dirs(
				(nilnul.fs.FolderI)(parent)
			);
		}

		static public IEnumerable<DirI> Dirs(DirectoryInfo parent)
		{
			return Dirs(
				new nilnul.fs.Folder(parent)
			);
		}

		static public IEnumerable<DirI> Dirs_ofAddress(string parent)
		{
			return Dirs(
				nilnul.fs.Folder.FroAddress(parent)
			);
		}

		static public IEnumerable<string> Addresses(DirectoryInfo parent)
		{

			return Dirs(parent).Select(
				d=>
				System.IO.Path.Combine(
					parent.FullName
					,
					d.denote.en
				)
			);
		}

		static public IEnumerable<string> Addresses_ofAddress(string parent)
		{
			return Addresses(new DirectoryInfo(parent));
		}
	}
}
